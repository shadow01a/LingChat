name: 📥 Download And Push Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: '要操作的 Release 标签名 (必须已存在)'
        required: true
      file_urls:
        description: |
          要下载并上传的文件URL列表，每行一个链接。
          格式：URL|文件名 (可选)
          示例：
          https://example.com/file1.zip|my-file.zip
          https://example.com/file2.tar.gz
        required: true
        type: textarea

jobs:
  check-and-upload:
    runs-on: ubuntu-latest
    steps:
      - name: 📋 打印输入参数
        run: |
          echo "目标 Release 标签: ${{ github.event.inputs.release_tag }}"
          echo "文件列表:"
          echo "${{ github.event.inputs.file_urls }}"

      - name: 🔍 检查 Release 是否存在
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.event.inputs.release_tag }}
        run: |
          # 使用GH CLI检查该标签的Release是否存在
          if gh release view "$TAG_NAME" > /dev/null 2>&1; then
              echo "Release $TAG_NAME 存在。"
              echo "release_exists=true" >> $GITHUB_OUTPUT
          else
              echo "Release $TAG_NAME 不存在。"
              echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 🗂️ 创建下载目录 (仅当Release存在时)
        if: steps.check_release.outputs.release_exists == 'true'
        run: mkdir -p downloaded_files

      - name: 📥 解析并下载多个文件 (仅当Release存在时)
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          # 将文本区域的输入按行分割成数组
          IFS=$'\n' read -d '' -r -a urls <<< "${{ github.event.inputs.file_urls }}"
          
          for line in "${urls[@]}"; do
            # 去除前后空格
            line_clean=$(echo "$line" | xargs)
            
            # 跳过空行
            if [ -z "$line_clean" ]; then
              continue
            fi

            # 解析URL和自定义文件名（如果提供了）
            if echo "$line_clean" | grep -q '|'; then
              url=$(echo "$line_clean" | cut -d'|' -f1 | xargs)
              filename=$(echo "$line_clean" | cut -d'|' -f2 | xargs)
            else
              url="$line_clean"
              # 从URL中提取文件名
              filename=$(basename "$url" | cut -d'?' -f1)
            fi

            echo "正在下载: $url → downloaded_files/$filename"
            
            curl -L -o "downloaded_files/$filename" "$url"
           
            if [ $? -eq 0 ] && [ -f "downloaded_files/$filename" ]; then
              file_size=$(du -h "downloaded_files/$filename" | cut -f1)
              echo "✓ 下载成功: $filename ($file_size)"
            else
              echo "✗ 下载失败: $url"
              exit 1
            fi
          done

      - name: ⬆️ 上传文件到已存在的Release (仅当Release存在时)
        if: steps.check_release.outputs.release_exists == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: downloaded_files/*
          tag_name: ${{ github.event.inputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ❌ 提示Release不存在 (仅当Release不存在时)
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "错误: 标签为 '${{ github.event.inputs.release_tag }}' 的 Release 不存在。"
          echo "请先在GitHub上创建该Release，或者检查标签名是否正确。"
          exit 1
